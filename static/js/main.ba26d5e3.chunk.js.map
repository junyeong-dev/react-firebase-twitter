{"version":3,"sources":["myFirebase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","marginTop","key","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","getMyTweets","where","orderBy","get","console","log","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba26d5e3.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\n// Firebase database 생성 : Firebase console - Cloud Firestore - Create database - Start in test mode \r\n/* \r\n    NoSQL기반\r\n    Collection : 기본적으로 폴더와 같음\r\n    Document : 흔히 아는 문서와 같음\r\n    Collection은 Document의 그룹\r\n*/\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    // REACT_APP_ : 환경 변수로써 사용할 때는 이 꼭 붙어야 함\r\n    // 보안을 위해서라기 보다는 github에 올리지 않기 위해\r\n    // 결국 서비스를 위해 빌드하게 되면 값으로 변환되어 빌드가 되기 때문에\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\n// reference : https://firebase.google.com/docs/reference/js/firebase.storage?hl=ko\r\nexport const storageService = firebase.storage();","import React, { useState } from \"react\";\r\nimport { authService } from \"myFirebase\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if(name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        // reference : https://firebase.google.com/docs/reference/js/firebase.auth.Auth?hl=ko#createuserwithemailandpassword\r\n        let data;\r\n        try {\r\n            if(newAccount) {\r\n                //  name=\"\"create account\r\n                // 아이디를 만든 후 firebase console의 Autentication에서 확인 가능\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            // console.log(data);\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n    return (\r\n        <>\r\n        <form onSubmit={ onSubmit } className=\"container\">\r\n            <input className=\"authInput\" name=\"email\" type=\"text\" placeholder=\"Email\" required value={ email } onChange={ onChange } />\r\n            <input className=\"authInput\" name=\"password\" type=\"password\" placeholder=\"Password\" required value={ password } onChange={ onChange } />\r\n            <input className=\"authInput authSubmit\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n            { error && <span className=\"authError\">{ error }</span> }\r\n        </form>\r\n        <span className=\"authSwitch\" onClick={ toggleAccount }>{ newAccount ? \"Sign In\" : \"Create Account\" }</span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthForm;","import React from \"react\";\r\nimport { authService, firebaseInstance } from \"myFirebase\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n// import { auth } from \"firebase\";\r\n\r\n/* \r\n    Auth 관리\r\n    firebase - console - authentication - sign in method (Email, Google, Github 선택; 물론 그 외에 것을 써도 상관없음)\r\n    - github\r\n    github - settings - Developer settings - OAuth Apps - New OAuth App\r\n    Homepage URL : callback URL에서 뒤 [ /__/auth/handler ] 을 빼고\r\n    Authorization callback URL : 위에서 github를 설정 했을때 나오는 callback url 붙여넣기\r\n    그 후 생성된 Client ID와 Client Secret을 firebase에 붙여넣기\r\n\r\n    firebase - console - authentication - sign in method - authorized domains(승인된 도메인)에 특정 도메인을\r\n    추가하여 접속을 허용할 수 있음\r\n\r\n    firebase - console - cloud firestore - rules의 작성 규칙은 아래 참조\r\n    https://firebase.google.com/docs/rules/rules-language\r\n*/\r\nconst Auth = () => {\r\n    const onSocialClick = async (event) => {\r\n        const { target:{ name } } = event;\r\n        let provider;\r\n        if(name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider(); \r\n        } else if(name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider(); \r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n\r\n    return(\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{ marginBottom: 30 }} />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button className=\"authBtn\" name=\"google\" onClick={ onSocialClick }>Continue with Google<FontAwesomeIcon icon={ faGoogle } /></button>\r\n                <button className=\"authBtn\" name=\"github\" onClick={ onSocialClick }>Continue with Github<FontAwesomeIcon icon={ faGithub } /></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Auth;","import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"myFirebase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n    // 수정버튼을 눌렀는지를 확인하기 위한 state\r\n    const [editing, setEditing] = useState(false);\r\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n    const onDeleteClick = async () => {\r\n        const checkDelete = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n        if(checkDelete){\r\n            // reference : https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#delete\r\n            // ['] single quotation [`] 이거 여야함\r\n            await dbService.doc(`tweets/${ tweetObj.id }`).delete();\r\n            // reference : https://firebase.google.com/docs/reference/js/firebase.storage.Storage#reffromurl\r\n            // Firebase의 storage에 있는 파일을 지움\r\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        // reference : https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#update\r\n        await dbService.doc(`tweets/${ tweetObj.id }`).update({\r\n            text: newTweet\r\n        });\r\n        setEditing(false);\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        setNewTweet(value);\r\n    }\r\n    return (\r\n        <div className=\"tweet\">\r\n            {editing ? (\r\n                <>\r\n                <form className=\"container tweetEdit\" onSubmit={ onSubmit } >\r\n                    <input className=\"formInput\" type=\"text\" placeholder=\"Edit\" value={ newTweet } onChange={ onChange } required autoFocus />\r\n                    <input className=\"formBtn\" type=\"submit\" value=\"Update Tweet\"/>\r\n                </form>\r\n                <button className=\"formBtn cancelBtn\" onClick={ toggleEditing }>Cancle</button>\r\n                </>\r\n                ) : (\r\n                <>\r\n                    <h4>{ tweetObj.text }</h4>\r\n                    { tweetObj.attachmentUrl && \r\n                        <img src={tweetObj.attachmentUrl} /> }\r\n                    { isOwner && (\r\n                        <div className=\"tweet_actions\">\r\n                            <span onClick={ onDeleteClick }>\r\n                                <FontAwesomeIcon icon={ faTrash } />\r\n                            </span>\r\n                            <span onClick={toggleEditing}>\r\n                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                            </span>\r\n                        </div>\r\n                    )}\r\n                </>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Tweet;","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"myFirebase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        if(tweet === '') {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        // console.log(attachment);\r\n        if(attachment !== \"\"){\r\n            // reference : https://firebase.google.com/docs/reference/js/firebase.storage.Reference?hl=ko\r\n            // collection과 비슷함\r\n            // uuid : 특별한 식별자를 랜덤으로 생성해줌\r\n            const attachmentRef = storageService.ref().child(`${ userObj.uid }/${ uuidv4() }`);\r\n            // upload 한 것은 Firebase console - Storage에서 확인 가능\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        };\r\n        // reference : https://firebase.google.com/docs/reference/js/firebase.firestore?hl=ko\r\n        // FirebaseError: Missing or insufficient permissions 이 에러가 뜰 경우 \r\n        // Cloud Firestore - Rules - allow read, write: if true -> false를 true로 변경\r\n        const tweetObj = {\r\n            text : tweet,\r\n            createAt : Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl\r\n        };\r\n        await dbService.collection(\"tweets\").add(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    const onChange = (event) => {\r\n        const { target:{ value } } = event;\r\n        setTweet(value);\r\n    }\r\n    const onFileChange = (event) => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        // reference : https://developer.mozilla.org/ko/docs/Web/API/FileReader\r\n        // reference : https://w3c.github.io/FileAPI/#FileReader-interface\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const { currentTarget: { result } } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    \r\n    return (\r\n        <form className=\"factoryForm\" onSubmit={ onSubmit }>\r\n            <div className=\"factoryInput_container\">\r\n                <input className=\"factoryInput_input\" type=\"text\" value={ tweet } onChange={ onChange } maxLength={ 120 } placeholder=\"what's on your mind\"/>\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput_arrow\"/>\r\n            </div>\r\n\r\n            <label for=\"attach-file\" className=\"factoryInput_label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            \r\n            {/* accept : 읽을 파일 종류를 선택 */}\r\n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={ onFileChange } style={{ opacity: 0 }}/>\r\n            { attachment && (\r\n                <div className=\"factoryForm_attachment\">\r\n                    <img src={attachment} style={{ backgroundImage: attachment }} />\r\n                    <div className=\"factoryForm_clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TweetFactory;","import React, { useState, useEffect } from\"react\";\r\nimport { dbService } from \"myFirebase\";\r\nimport Tweet from \"components/Tweet\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [tweets, setTweets] = useState([]);\r\n    // const getTweets = async() => {\r\n    //     // reference : https://firebase.google.com/docs/reference/js/firebase.firestore.QuerySnapshot?hl=ko\r\n    //     // get()의 리턴 값은 QuerySnapshot\r\n    //     const dvTweets = await dbService.collection(\"tweets\").get();\r\n    //     // dvTweets.forEach((document) => console.log(document.data()));\r\n    //     dvTweets.forEach((document) => {\r\n    //         const tweetObject = {\r\n    //             ...document.data(),\r\n    //             id: document.id\r\n    //         }\r\n    //         setTweets((prev) => [tweetObject, ...prev]);\r\n    //     });\r\n    // }\r\n    useEffect(() => {\r\n        // getTweets();\r\n        // 실시간으로 반영하기 위한 기능\r\n        dbService.collection(\"tweets\").onSnapshot(snapshot => {\r\n            // foreach보다 더 적게 re-render함\r\n            const tweetArray = snapshot.docs.map(doc => ({ \r\n                id : doc.id, \r\n                ...doc.data(), \r\n            }));\r\n            setTweets(tweetArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n    <div className=\"container\">\r\n        <TweetFactory userObj={ userObj } />\r\n        <div style={{ marginTop: 30 }}>\r\n            { tweets.map((tweet) => (\r\n                <Tweet key={ tweet.id } tweetObj={ tweet } isOwner={ tweet.creatorId === userObj.uid }/>\r\n            ))}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n            <Link to=\"/\" style={{ marginRight: 10 }}>\r\n                <FontAwesomeIcon icon={ faTwitter } color={ \"#04AAFF\" } size=\"2x\" />\r\n            </Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/profile\" style={{ marginLeft: 10, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", fontSize: 12 }}>\r\n                <FontAwesomeIcon icon={ faUser } color={\"#04AAFF\"} size=\"2x\" />\r\n                <span style={{ marginTop: 10 }}  />\r\n                { userObj.displayName \r\n                    ? `${ userObj.displayName }'s Profile`\r\n                    : \"Profile\" } \r\n            </Link>\r\n        </li>\r\n    </ul>\r\n);\r\nexport default Navigation;\r\n\r\n","import React, { useEffect, useState } from\"react\";\r\nimport { authService, dbService } from \"myFirebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n    // reference : https://reactrouter.com/web/api/Redirect\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        // Redirect\r\n        history.push(\"/\");\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            // reference : https://firebase.google.com/docs/reference/js/firebase.User#updateprofile\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    const getMyTweets = async() => {\r\n        // Firebase의 데이터를 필터링해서 가져옴\r\n        // orderBy의 경우 index를 사용해야 하기 때문에 index가 아니면 console에 에러가 뜨고,\r\n        // 그 에러의 링크를 통해 index를 만들 수 있음(물론 Firebase console에서도 만들 수 있음)\r\n        const tweets = await dbService.\r\n                            collection(\"tweets\")\r\n                            .where(\"creatorId\", \"==\", userObj.uid)\r\n                            .orderBy(\"createAt\")\r\n                            .get();\r\n        console.log(tweets.docs.map((doc) => doc.data()));\r\n    }\r\n    useEffect(() => {\r\n        getMyTweets();\r\n    }, []);\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"profileForm\" onSubmit={ onSubmit }>\r\n                <input className=\"formInput\" type=\"text\" placeholder=\"Display name\" onChange={ onChange } value={ newDisplayName } autoFocus />\r\n                <input className=\"formBtn\" type=\"submit\" value=\"Update Profile\" style={{ marginTop: 10 }}/>\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={ onLogOutClick }> Log Out </span>\r\n        </div>\r\n    );\r\n\r\n};","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return (\r\n        <Router>\r\n            { isLoggedIn && <Navigation userObj={ userObj } /> }\r\n            <Switch>\r\n                { isLoggedIn ? (\r\n                <div style={{ maxWidth: 890, width: \"100%\", margin: \"0 auto\", marginTop: 80, display: \"flex\", justifyContent: \"center\" }}>\r\n                    <Route exact path=\"/\">\r\n                        <Home userObj={ userObj } />\r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                        <Profile userObj={ userObj } refreshUser={ refreshUser } />\r\n                    </Route>\r\n                </div>\r\n                ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import React, { useState, useEffect } from 'react';\n// jsconfig.json의 경로 설정으로 인해 ../ ./ 대신 아래와 같이 import할 수 있게 됨\nimport AppRouter from 'components/Router';\nimport { authService } from \"myFirebase\";\n\nfunction App() {\n  // https://firebase.google.com/docs/reference\n  // https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n  const [init, setInit] = useState(false);\n  // 로그인한 유저의 정보를 담을 객체\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        // Object가 크면 rerendering에 시간이 오래 걸리거나 안될 수 있기 때문에, Object의 크기를 줄여줌\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  }\n  return (\n    <>\n      { init ? <AppRouter refreshUser={ refreshUser } isLoggedIn={ Boolean(userObj) } userObj={ userObj } /> : \"Initializing...\" }\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}